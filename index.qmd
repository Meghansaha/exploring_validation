---
title: "Exploring Data Validation"
subtitle: "\"With The  `pointblank`  Package\""
author: "Meghan Harris, MPH"
institute: "Cleveland R User Group"
date: "October 26th 2022 | 2022-10-26"
format:
  revealjs: 
    slide-number: true
    theme: theme.scss
    css: theme.css
    linkcolor: "#1a1a1a"
    highlight-style: github
    code-copy: true
    code-link: true
    code-overflow: wrap
    code-block-bg: true
    transition: fade
    width: 1600
editor: visual
title-slide-attributes: 
  data-background-image: "images/title_back.PNG"
  data-background-size: "45%"
  data-background-position: "right"
---

## [About Me]{style="color: #000000;"} {.dark background-color="#333333"}

<br>

::: columns
::: {.column width="40%"}
![](images/headshot.jpg){#headshot}
:::

::: {.column width="60%"}
-   I'm Meghan Harris üëãüèæ
-   Data Scientist üíª
-   Prostate Cancer Clinical Trials Consortium (PCCTC) - Memorial Sloan Kettering ‚öõÔ∏è
-   <a href="https://thetidytrekker.com" class="link">thetidytrekker.com</a> üåê
-   <a href="https://twitter.com/meghansharris" class="link">@meghansharris</a> ![](images/icons/twitter.png){width="40"}
-   <a href="https://www.linkedin.com/in/meghan-harris/" class="link">meghan-harris</a> ![](images/icons/linkedin.png){width="35" height="35"}
:::
:::

## <span style="color: #ffffff;">What are We Doing Today? {.light background-color="#ffffff"}

::: incremental
<br>

-   What is Validation and Why Do We Care?

-   Different Types of Validations

-   What is `pointblank`?

-   Why `pointblank`?

-   `pointblank` Use-Cases
:::

## [Disclaimer]{style="color: #000000;"} {.dark background-color="#333333"}

<center>

<h1 style="margin-top:5%">

I'm **ABSOLUTELY not an expert** in Data Validation or the `pointblank` package

</h1>

::: fragment
![](images/phony.png){.memes width="500px" height="350px"}
:::

</center>

##  {.trans background-color="#ffffff" background-image="images/trans1.png" background-size="65%"}

<h1>

<center>[What is Validation?<br>and Why Do We Care?]{style="color: #ffffff;"}</center>

</h1>

## <span style="color: #ffffff;">What is Validation? and Why Do We Care? {.light background-color="#ffffff"}

**Validation**: the action of checking or proving the accuracy of something.

<br>

::: fragment
This can look like a lot of things:
:::

::: incremental
-   Testing Data Inputs
-   Testing Data Outputs
-   Testing Pipeline Logic
-   Enforcing Pipeline/Analysis/Data Rules
:::

## <span style="color: #ffffff;">What is Validation? and Why Do We Care? {.light background-color="#ffffff"}

> Why is it important? ... Because...

<br>

::: {.fragment .fade-in-then-out}
![](images/check_yourself.png){.memes fig-align="center"}
:::

::: fragment
[.]{style="color:#ffffff;"}
:::

## <span style="color: #ffffff;">What is Validation? and Why Do We Care? {.light background-color="#ffffff" transition="none"}

> Why is it important? ... Because...

<br>

::: incremental
-   Your work is no good if it's not right
-   Incorrect assumptions about data can be costly and unethical
-   Real world data is usually complex and nuanced
-   External controls may be lacking or non-existent
:::

## <span style="color: #ffffff;">What is Validation? and Why Do We Care? {.light background-color="#ffffff"}

> The art of Data Validation is a Rabbit Hole

![](images/rabbithole.png){.memes fig-align="center"}

## <span style="color: #ffffff;">What is Validation? and Why Do We Care? {.light background-color="#ffffff"}

> Don't fall for the *"Validation Crux"*

![](images/perfectplan.png){.memes fig-align="center"}

## <span style="color: #ffffff;">What is Validation? and Why Do We Care? {.light background-color="#ffffff"}

<br>

-   Data Validation is a "rabbithole" because you could probably spend an eternity thinking about the "best" plans for validation.

::: incremental
-   Deciding to think seriously about data validation is a humbling experience that should be done with care.
:::

::: {.fragment .fade-in}
::: {.fragment .highlight-red}
-   Data validation plans should be developed with a holistic, "systems" approach that includes any applicable third parties, data management teams, data collectors, etc.
:::
:::

## <span style="color: #ffffff;">What is Validation? and Why Do We Care? {.light background-color="#ffffff"}

<br>

üí°Remember:

<br>

> Start "small" by looking at the most important pieces of your data and figuring out the **minimum building blocks** of logic or assumptions that are needed to make a fairly confident guess that the data is actually accurate. It is normal for this to be an **iterative** process.

<br>

::: fragment
***Different "types" of validations** can be considered as the building blocks you need to get started.*
:::

<br>

##  {.transdark background-color="#333333" background-image="images/trans2.png" background-size="65%"}

<h1>

<center>[Different Types<br>of Validations]{style="color: #000000;"}</center>

</h1>

## [Different Types of Validations]{style="color: #000000;"} {.dark background-color="#333333"}

::: {.fragment .fade-out}
-   There are **eight basic types** that I always mention...but this list is NOT exhaustive:
:::

::: fragment
[.]{style="color: #333333;"}
:::

## [Different Types of Validations]{style="color: #000000;"} {.dark background-color="#333333"}

::: panel-tabset
## ![Variable Type](images/vartype.png){fig-align="left" width="110"}

::: columns
::: {.column width="50%"}
<h3>Variable Type</h3>

*"Is this variable the same class/type we are expecting?"*

<br>

**Example:** - Is R reading this as a numeric or integer variable, or is it just a string impostor?
:::

::: {.column width="50%"}
<br>

::: fragment
```{r vartype, echo = TRUE}

# Variable Type Check - Base R
actual_number <- 2022
fake_number <- "2022"

#Actual Number?
is.numeric(actual_number)

#Actual Number?
is.numeric(fake_number)

```
:::
:::
:::

## ![Allowed/Expected Values](images/expvalues.png){fig-align="left" width="110"}

::: columns
::: {.column width="50%"}
<h3>Allowed/Expected Values</h3>

*"Is the value of the variable one that is allowed or expected?"*

<br>

**Example:** - Can we confirm that the value R is reading makes sense given the context of allowed or expected values for this variable?
:::

::: {.column width="50%"}
<br>

::: fragment
```{r expvalues, echo = TRUE}

# Allowed/Expected Values Check - Base R
age <- -99
first_name <- "Meghan"

#Is age a valid number and over the value of zero?
is.numeric(age) & age > 0 

#Is first name a character string?
is.character(first_name)

```
:::
:::
:::

## ![Missing Data](images/missingdata.png){fig-align="left" width="110"}

::: columns
::: {.column width="50%"}
<h3>Missing Data</h3>

*"Is there any missing data where there should/shouldn't be?"*

<br>

**Example:** - Do we logically expect any values in a variable to be missing or should missing data prompt us to investigate the data further?
:::

::: {.column width="50%"}
<br>

::: fragment
```{r missingdata_prep, echo = FALSE}

# Missing Data Check - Base R
subject_data <- data.frame("subject_id" = c(345,123,NA),
                           "consent" = c("Yes","Yes", "No"))

```

```{r missingdata, echo = TRUE}

# Missing Data Check - Base R
subject_data

#Are IDs missing only for those w/ no consent?
which(is.na(subject_data$subject_id)) == which(subject_data$consent == "No")

```
:::
:::
:::

## ![Logic Checks](images/logiccheck.png){fig-align="left" width="110"}

::: columns
::: {.column width="50%"}
<h3>Logic Checks</h3>

*"Is the data logically making sense upon delivery or after transformation/analyses/processing?"*

<br>

**Example:** - Does the data make sense given the context of collection, processing, or analysis?
:::

::: {.column width="50%"}
<br>

::: fragment
```{r logic_prep, echo = FALSE}

# Logic Check - Base R
old_data <- data.frame("id" = sample(1:10))
new_data <- data.frame("id" = sample(1:10))
```

```{r logiccheck, echo = TRUE}

# Logic Data Check - Base R

# Is a new data frame different from an old data frame?#
!identical(old_data, new_data)
```
:::
:::
:::

## ![Uniqueness](images/uniqueness.png){fig-align="left" width="110"}

::: columns
::: {.column width="50%"}
<h3>Uniqueness</h3>

*"Should we expect data values to be unique or duplicated?"*

<br>

**Example:** - Given the context of the data, do we expect R to find any duplicates? Is it a bad thing or have any meaning if present?
:::

::: {.column width="50%"}
<br>

::: fragment
```{r uniqueness, echo = TRUE}

# Uniqueness Check - Base R
#Check to see there are 0 duplicated IDs
anyDuplicated(subject_data$subject_id) == 0

```
:::
:::
:::

## ![String Length](images/stringlength.png){fig-align="left" width="110"}

::: columns
::: {.column width="50%"}
<h3>String Length</h3>

*"Is the string/character value of the right left given the context of the data?"*

<br>

**Example:** - Is the string's length appropriate given the data's meaning?
:::

::: {.column width="50%"}
<br>

::: fragment
```{r stringlengthprep, echo = FALSE}

us_zipcodes <- c("14215", "14120", "142", "08796", "867")

```

```{r stringlength, echo = TRUE}

# String Length Check - Base R
#Do all of our "US zipcodes" have a string length of 5 characters?

sapply(us_zipcodes, function(x) nchar(x) == 5)
```
:::
:::
:::

## ![Formatting](images/formatting.png){fig-align="left" width="110"}

::: columns
::: {.column width="50%"}
<h3>Formatting</h3>

*"Is the general format of the data as we expect?"*

<br>

**Example:** - Can R confirm that our data matches a specific format that is needed for our work?
:::

::: {.column width="50%"}
<br>

::: fragment
```{r formatprep, echo = FALSE}

dates <- c("2022-08-04", "1998/06/12", "01-15-1943")

```

```{r format, echo = TRUE}

# Data Format Check - Lubridate
#Do all of our dates match the YYYY-MM-DD format?
dates


library(lubridate)
!is.na(parse_date_time(dates,orders="ymd"))
```
:::
:::
:::

## ![Range Checks](images/rangechecks.png){fig-align="left" width="110"}

::: columns
::: {.column width="50%"}
<h3>Range Checks</h3>

*"Does the data fall into an accepted pre-determined range?"*

<br>

**Example:** - Can R confirm that our data matches a specific range that fits within the context of the data?
:::

::: {.column width="50%"}
<br>

::: fragment
```{r rangeprep, echo = FALSE}

subject_data <- data.frame("age" = sample(5:90, 3))

```

```{r range, echo = TRUE}

# Range Check - Base R
#Are all of the subjects 18 - 65 years old?

subject_data$over_18 <- sapply(subject_data$age, 
                               function(x) x >= 18 & x <= 65)

subject_data
```
:::
:::
:::
:::

##  {.trans background-color="#ffffff" background-image="images/trans3.png" background-size="65%"}

<h1>

<center>[What is `pointblank`?]{style="color: #ffffff;"}</center>

</h1>

## <span style="color: #ffffff;">What is `pointblank`? {.light background-color="#ffffff"}

<br> Pointblank is an R package by [Rich Iannone](https://twitter.com/riannone) (author/maintainer) and Mauricio Vargas (author) that was created to assist with methodically validating data and keeping track of relevant *metadata (data about data)* in R.

[![](images/logo.svg){fig-alt="pointblank" fig-align="center"}](https://rich-iannone.github.io/pointblank/reference/index.html)

## <span style="color: #ffffff;">What is `pointblank`? {.light background-color="#ffffff"}

`pointblank` currently has **6** presented validation workflows in the package:

1.  [VALID-I: Data Quality Reporting](https://rich-iannone.github.io/pointblank/articles/VALID-I.html)

2.  [VALID-II: Pipeline Data Validation](https://rich-iannone.github.io/pointblank/articles/VALID-II.html)

::: {.fragment .semi-fade-out}
3.  [VALID-III: Expectations in Unit Tests](https://rich-iannone.github.io/pointblank/articles/VALID-III.html)

4.  [VALID-IV: Data Tests for Conditionals](https://rich-iannone.github.io/pointblank/articles/VALID-IV.html)
:::

5.  [VALID-V: Table Scan](https://rich-iannone.github.io/pointblank/articles/VALID-V.html)

::: {.fragment .semi-fade-out}
6.  [VALID-VI: R Markdown Document Validation](https://rich-iannone.github.io/pointblank/articles/VALID-VI.html)
:::

##  {.transdark background-color="#333333" background-image="images/trans4.png" background-size="65%"}

<h1>

<center>[Why `pointblank`?]{style="color: #000000;"}</center>

</h1>

## <span style="color: #000000;">Why `pointblank`? {.dark background-color="#333333"}

> While you can use base R and other relevant packages like [`validate`](https://github.com/data-cleaning/validate) or [`testthat`](https://testthat.r-lib.org/) for data validation and testing in R, `pointblank` is a validation package that has a heavy focus on implementing easy reporting and methodological validation schema with ease.

<br>

::: fragment
However...

<center>To a lowly beginner (like myself) `pointblank` *can* be overwhelming...</center>
:::

## <span style="color: #000000;">Why `pointblank`? {.dark background-color="#333333" auto-animate="true"}

<center>![](images/pb_functions.png){.memes width="1231" height="550"}</center>

##  {.trans background-color="#ffffff" background-image="images/trans5.png" background-size="65%"}

<h1>

<center>[`pointblank` Use-Cases]{style="color: #ffffff;"}</center>

</h1>

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

![](images/table.png) ![](images/agent.png){style="opacity: 0;"}

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

![](images/table.png) ![](images/agent.png)

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

![](images/table.png) ![](images/agent.png) ![](images/interrogate.png)

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Example Scenario:

<br>

<blockquote>We've got some aggregate study data that includes the total number of patients present in a US State for our clinical trial studies. Each total also has an associated report date that's recorded. Because this is the real world, there's no external control in the data collection process and it's pretty F-tierÔ∏èüôÉ</blockquote>

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Example Data:

```{r dqr_data_loadin, echo = TRUE}
#example_script_1.R in the example_scripts folder#
library(readr)

#Load in the data#
example_data <- read_csv("data/example_data.csv")

#view it - or not ü§∑üèæ‚Äç‚ôÄÔ∏è
example_data

```

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

::: columns
::: {.column width="50%"}
<br>

<center>

```{r dqr_data_table, echo = FALSE, fig.align='center'}
library(gt)
library(gtExtras)
example_data |>
  gt() |>
  tab_header(title = "Study Patient Totals") |>
  tab_options(table.background.color = "#333333",
              column_labels.background.color = "grey") |>
  cols_align("center")
```

</center>
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
::: fragment
### Make a Plan:
:::

::: incremental
-   [There's **3** variables (*columns*) and **5** observations (*rows*).]{style="font-size: 25px"}</span>

-   [`state`: Official U.S states that we'd expect to be spelled correctly and capitalized.]{style="font-size: 25px"}

-   [`total_patients`: A total number of patients reported from each state. We'd expect this to be a numeric type and make sense. Only positive values.]{style="font-size: 25px"}

-   [`report_date`: A reported date of entry. We'd expect this to be a date type and have consistent formatting for each observations.]{style="font-size: 25px"}
:::
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff" auto-animate="true"}

::: columns
::: {.column width="70%"}
### Create an Agent:

<center>

```{r dqr_val1, echo = TRUE}
library(pointblank) #For validation help

#Make an agent
patient_agent <- create_agent(tbl = example_data,
                              tbl_name = "Patient Totals")

```

</center>
:::

::: {.column width="1%"}
:::

::: {.column width="29%"}
### Our Steps:

1.  Create an "agent"
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff" auto-animate="true"}

::: columns
::: {.column width="70%"}
### Pipe in Valdation Rules:

```{r dqr_val2, echo = TRUE, `code-line-numbers`="6-9|6|7|8|9"}
library(pointblank) #For validation help

#Make an agent
patient_agent <- create_agent(tbl = example_data,
                              tbl_name = "Patient Totals") %>%
  col_vals_in_set(state, state.name ) %>% #Only valid states in the column?
  col_is_numeric(total_patients) %>% #Is column type numeric?
  col_vals_gte(total_patients,0) %>% #Only values greater than 0 in the column?
  col_is_date(report_date) #Is column type date?

```
:::

::: {.column width="1%"}
:::

::: {.column width="29%"}
### Our Steps:

1.  Create an "Agent"
2.  Pipe in [Validation Rules](https://rich-iannone.github.io/pointblank/reference/index.html#validation-expectation-and-test-functions)
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff" auto-animate="true"}

::: columns
::: {.column width="70%"}
### Interrogate the Agent:

```{r dqr_val3, echo = TRUE, results='hide', `code-line-numbers`="11-13"}
library(pointblank) #For validation help

#Make an agent#
patient_agent <- create_agent(tbl = example_data,
                              tbl_name = "Patient Totals") %>%
  col_vals_in_set(state, state.name ) %>% #Only valid states in the column?
  col_is_numeric(total_patients) %>% #Is column type numeric?
  col_vals_gte(total_patients,0) %>% #Only values greater than 0 in the column?
  col_is_date(report_date) #Is column type date?

#interrogate it#
patient_agent %>%
  interrogate()

```
:::

::: {.column width="1%"}
:::

::: {.column width="29%"}
### Our Steps:

1.  Create an "Agent"
2.  Pipe in [Validation Rules](https://rich-iannone.github.io/pointblank/reference/index.html#validation-expectation-and-test-functions)
3.  Interrogate the Agent
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Interrogation Results in Viewer Pane:

<center>![](images/dqr_result.png)</center>

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Breaking it Down:

::: columns
::: {.column width="60%"}
![](images/dqr_result2.png)
:::

::: {.column width="40%"}
<center><br><br><br> **Date/Time/Object Metadata**</center>
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Breaking it Down:

::: columns
::: {.column width="60%"}
![](images/dqr_result3.png)
:::

::: {.column width="40%"}
<center><br><br> **`STEP`: The name of the validation functions used. Color-coded tabs let us know if a step was completed. Darker green means everything in the step passed**</center>
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Breaking it Down:

::: columns
::: {.column width="60%"}
![](images/dqr_result4.png)
:::

::: {.column width="40%"}
<center><br><br><br> **`COLUMNS`: The target columns we told the agent to interrogate via our validation rules**</center>
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Breaking it Down:

::: columns
::: {.column width="60%"}
![](images/dqr_result5.png)
:::

::: {.column width="40%"}
<center><br><br> **`VALUES`: Any required values needed/used to test for validation if applicable.**</center>
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Breaking it Down:

::: columns
::: {.column width="60%"}
![](images/dqr_result6.png)
:::

::: {.column width="40%"}
<center><br><br> **`TBL`: Let's us know if the table was mutated in a validation step.** <br><br> **`EVAL`: Let's us know if there's issues R might have evaluating the table itself.**</center>
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Breaking it Down:

::: columns
::: {.column width="60%"}
![](images/dqr_result7.png)
:::

::: {.column width="40%"}
<center>

<br> **`UNITS`: Gives the total number of tests ran for each step** <br><br>

::: fragment
[*Steps that check all values in a column =* ***5*** *because we have five rows of data*]{style="font-size: 25px"}
:::

::: fragment
[*Steps that just check a whole column =* ***1*** *because it's just evaluating one column*]{style="font-size: 25px"}
:::

</center>
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Breaking it Down:

::: columns
::: {.column width="60%"}
![](images/dqr_result8.png)
:::

::: {.column width="40%"}
<center><br><br><br> **`PASS`/`FAIL`: Gives the number/percentage of passing and failing unit tests**</center>
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Breaking it Down:

::: columns
::: {.column width="60%"}
![](images/dqr_result9.png)
:::

::: {.column width="40%"}
<center><br><br> **`W,S,N`: Tells us if the validation steps have entered `WARN`, `STOP`, or `NOTIFY`. This is empty because there's no `action levels` set.**</center>
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Breaking it Down:

::: columns
::: {.column width="60%"}
![](images/dqr_result10.png)
:::

::: {.column width="40%"}
<center><br><br><br> **`EXT`: Provides a download of a data extract of observations that failed any validations if applicable.**</center>
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff" auto-animate="true"}

### Data Extracts:

::: columns
::: {.column width="50%"}
```{r dqr_ext, echo = TRUE, results='hide', `code-line-numbers`="4|5-6"}
#Generate a data extract#
patient_agent %>%
  interrogate() %>%
  get_data_extracts() %>%
  setNames(c("State Validation Fails",
             "Patient Total Validation Fails"))
```
:::

::: {.column width="50%"}
```{r dqr_ext2, echo = FALSE}
#Generate a data extract#
patient_agent %>%
  interrogate() %>%
  get_data_extracts() %>%
  setNames(c("State Validation Fails",
             "Patient Total Validation Fails"))
```
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

::: columns
::: {.column width="70%"}
### Setting optional `action_levels()`:

```{r dqr_als, echo = TRUE, results='hide', `code-line-numbers`="1-4,9"}
#Make an action levels object#
al <- action_levels(warn_at = 0.2, 
                    stop_at = 0.5,
                    notify_at = 1)

#Make an agent#
patient_agent <- create_agent(tbl = example_data,
                              tbl_name = "Patient Totals",
                              actions = al) %>%
  col_vals_in_set(state, state.name ) %>% #Only valid states in the column?
  col_is_numeric(total_patients) %>% #Is column type numeric?
  col_vals_gte(total_patients,0) %>% #Only values greater than 0 in the column?
  col_is_date(report_date) #Is column type date?

#interrogate it#
patient_agent %>%
  interrogate()

```
:::

::: {.column width="1%"}
:::

::: {.column width="29%"}
<br> - [We can use `action_levels()` to give our agent more directives when interrogating our data.]{style="font-size: 30px"}

<br> - [We can set the fraction/percentage levels of validation failure that determines when the agent warns us, or stops the process altogether.]{style="font-size: 30px"}
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Data Quality Reporting {.light background-color="#ffffff"}

### Interrogation Results (With `action_levels()`) in Viewer Pane:

<center>![](images/actionresults.png)</center>

## <span style="color: #ffffff;">`pointblank` Use-Cases: Pipeline Data Validation {.light background-color="#ffffff"}

![](images/table.png) ![](images/rules.png){style="opacity: 0;"}

## <span style="color: #ffffff;">`pointblank` Use-Cases: Pipeline Data Validation {.light background-color="#ffffff"}

![](images/table.png) ![](images/rules.png)

## <span style="color: #ffffff;">`pointblank` Use-Cases: Pipeline Data Validation {.light background-color="#ffffff"}

![](images/table.png) ![](images/rules.png) ![](images/sideeffects.png)

## <span style="color: #ffffff;">`pointblank` Use-Cases: Pipeline Data Validation {.light background-color="#ffffff" auto-animate="true"}

::: columns
::: {.column width="55%"}
### Apply Validation Rules Directly to the Table:

<br>

<center>

```{r pl_val1, eval = FALSE, echo = TRUE}
example_data %>%
  col_vals_in_set(state, state.name,
                  actions = warn_on_fail(warn_at = .6)) %>%
  col_is_numeric(total_patients,
                 actions = stop_on_fail(stop_at = 1)) %>% 
  col_vals_gte(total_patients,-0,
               actions = al) %>%
  col_is_date(report_date)
```

</center>
:::

::: {.column width="3%"}
:::

::: {.column width="42%"}
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Pipeline Data Validation {.light background-color="#ffffff" auto-animate="true"}

::: columns
::: {.column width="55%"}
### Apply Validation Rules Directly to the Table:

<br>

<center>

```{r pl_val2, eval = FALSE, echo = TRUE,`code-line-numbers`="1-3"}
example_data %>%
  col_vals_in_set(state, state.name,
                  actions = warn_on_fail(warn_at = .6)) %>%
  col_is_numeric(total_patients,
                 actions = stop_on_fail(stop_at = 1)) %>% 
  col_vals_gte(total_patients,-0,
               actions = al) %>%
  col_is_date(report_date)
```

</center>
:::

::: {.column width="3%"}
:::

::: {.column width="42%"}
### Action Possibilities:

-   Use `warn_on_fail()` for targeted warnings
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Pipeline Data Validation {.light background-color="#ffffff" auto-animate="true"}

::: columns
::: {.column width="55%"}
### Apply Validation Rules Directly to the Table:

<br>

<center>

```{r pl_val3, eval = FALSE, echo = TRUE,`code-line-numbers`="4-5"}
example_data %>%
  col_vals_in_set(state, state.name,
                  actions = warn_on_fail(warn_at = .6)) %>%
  col_is_numeric(total_patients,
                 actions = stop_on_fail(stop_at = 1)) %>% 
  col_vals_gte(total_patients,-0,
               actions = al) %>%
  col_is_date(report_date)
```

</center>
:::

::: {.column width="3%"}
:::

::: {.column width="42%"}
### Action Possibilities:

-   Use `warn_on_fail()` for targeted warnings

-   Use `stop_on_fail()` for targeted stops/error catches
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Pipeline Data Validation {.light background-color="#ffffff" auto-animate="true"}

::: columns
::: {.column width="55%"}
### Apply Validation Rules Directly to the Table:

<br>

<center>

```{r pl_val4, eval = FALSE, echo = TRUE,`code-line-numbers`="6-7"}
example_data %>%
  col_vals_in_set(state, state.name,
                  actions = warn_on_fail(warn_at = .6)) %>%
  col_is_numeric(total_patients,
                 actions = stop_on_fail(stop_at = 1)) %>% 
  col_vals_gte(total_patients,-0,
               actions = al) %>%
  col_is_date(report_date)
```

</center>
:::

::: {.column width="3%"}
:::

::: {.column width="42%"}
### Action Possibilities:

-   Use `warn_on_fail()` for targeted warnings

-   Use `stop_on_fail()` for targeted stops/error catches

-   Use an `action_levels()` object for more control
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Pipeline Data Validation {.light background-color="#ffffff" auto-animate="true"}

::: columns
::: {.column width="55%"}
### Apply Validation Rules Directly to the Table:

<br>

<center>

```{r pl_val5, eval = FALSE, echo = TRUE,`code-line-numbers`="8"}
example_data %>%
  col_vals_in_set(state, state.name,
                  actions = warn_on_fail(warn_at = .6)) %>%
  col_is_numeric(total_patients,
                 actions = stop_on_fail(stop_at = 1)) %>% 
  col_vals_gte(total_patients,-0,
               actions = al) %>%
  col_is_date(report_date)
```

</center>
:::

::: {.column width="3%"}
:::

::: {.column width="42%"}
### Action Possibilities:

-   Use `warn_on_fail()` for targeted warnings

-   Use `stop_on_fail()` for targeted stops/error catches

-   Use an `action_levels()` object for more control

-   Use no actions at all for basic testing
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Pipeline Data Validation {.light background-color="#ffffff" auto-animate="true"}

### The goal is the side-effects to maintain/halt the workflow:

<br>

::: columns
::: {.column width="50%"}
```{r pl_val_error, echo = TRUE, error=TRUE}
example_data %>%
  col_vals_in_set(state, state.name,
                  actions = warn_on_fail(warn_at = .6)) %>%
  col_is_numeric(total_patients,
                 actions = stop_on_fail(stop_at = 1)) %>% 
  col_vals_gte(total_patients,-0,
               actions = al) %>%
  col_is_date(report_date)
```
:::

::: {.column width="50%"}
<br><br><br>

<center>Fails will [**halt**]{style="color:red;"} R's workflow</center>
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Pipeline Data Validation {.light background-color="#ffffff"}

### The goal is the side-effects to maintain/halt the workflow:

<br>

::: columns
::: {.column width="50%"}
```{r pl_val_pass, echo = TRUE}
example_data %>%
  col_is_numeric(total_patients,
                 actions = stop_on_fail(stop_at = 1)) 
```
:::

::: {.column width="50%"}
<br><br><br>

<center>Passes will [**maintain**]{style="color:green;"} R's workflow</center>
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Table Scans {.light background-color="#ffffff"}

<center>![](images/scan.png)</center>

## <span style="color: #ffffff;">`pointblank` Use-Cases: Table Scans {.light background-color="#ffffff" auto-animate="true"}

<br>

### Sometimes (always)...we should just look at our data... ü§∑üèæ‚Äç

::: columns
::: {.column width="50%"}
<br>

```{r scan1, echo = TRUE, eval = FALSE}
#Use the scan_data function to generate an HTML output#
example_data %>%
  scan_data()
```
:::

::: {.column width="50%"}
-   Simply use `scan_data()` to generate an automated [HTML output](table_scan.html) that gives information about the table.
:::
:::

## <span style="color: #ffffff;">`pointblank` Use-Cases: Table Scans {.light background-color="#ffffff" auto-animate="true"}

<br>

### We can also set [some options](mod_scan.html)...

::: columns
::: {.column width="50%"}
<br>

```{r scan2, echo = TRUE, eval = FALSE}
#Use the scan_data function to generate an HTML output#
#With options#
example_data %>%
  scan_data(sections = "OV",
            navbar = FALSE,
            lang = "es",
            width = 500,
            locale = "es_ES")
```
:::

::: {.column width="3%"}
:::

::: {.column width="47%"}
-   [`sections` - "OVICMS" (Overview, Variables, Interactions, Correlations, Missing Values, Sample)]{style="font-size:25px;"}
-   [`navbar` - Toggles the navigation bar on/off]{style="font-size:25px;"}
-   [`lang` - Chooses a language to present the report in: (English, French, German, Italian, Spanish, Portuguese, Chinese, Russian)]{style="font-size:25px;"}
-   [`width` - Width of the HTML report]{style="font-size:25px;"}
-   [`locale` - Sets the region/locale for formatting numerical values.]{style="font-size:25px;"}
:::
:::

##  {.transdark background-color="#333333" background-image="images/trans6.png" background-size="65%"}

<h1>

<center>[Questions?]{style="color: #000000;"}</center>

</h1>
